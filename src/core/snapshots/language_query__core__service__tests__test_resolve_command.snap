---
source: src/core/service.rs
expression: redacted
---
Found symbol `HashMap` in lib.rs:


```rust
std::collections::hash::map
```

```rust
pub struct HashMap<K, V, S = RandomState> {
    base: HashMap<K, V, S>,
}
```

---

A [hash map] implemented with quadratic probing and SIMD lookup.

By default, `HashMap` uses a hashing algorithm selected to provide
resistance against HashDoS attacks. The algorithm is randomly seeded, and a
reasonable best-effort is made to generate this seed from a high quality,
secure source of randomness provided by the host without blocking the
program. Because of this, the randomness of the seed depends on the output
quality of the system's random number coroutine when the seed is created.
In particular, seeds generated when the system's entropy pool is abnormally
low such as during system boot may be of a lower quality.

The default hashing algorithm is currently SipHash 1-3, though this is
subject to change at any point in the future. While its performance is very
competitive for medium sized keys, other hashing algorithms will outperform
it for small keys such as integers as well as large keys such as long
strings, though those algorithms will typically *not* protect against
attacks such as HashDoS.

The hashing algorithm can be replaced on a per-`HashMap` basis using the
[`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods.
There are many alternative [hashing algorithms available on crates.io](https://crates.io/keywords/hasher).

It is required that the keys implement the [`Eq`](https://doc.rust-lang.org/stable/core/cmp/trait.Eq.html) and [`Hash`](https://doc.rust-lang.org/stable/core/hash/trait.Hash.html) traits, although
this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.
If you implement these yourself, it is important that the following
property holds:

```text
k1 == k2 -> hash(k1) == hash(k2)
```

In other words, if two keys are equal, their hashes must be equal.
Violating this property is a logic error.

It is also a logic error for a key to be modified in such a way that the key's
hash, as determined by the [`Hash`](https://doc.rust-lang.org/stable/core/hash/trait.Hash.html) trait, or its equality, as determined by
the [`Eq`](https://doc.rust-lang.org/stable/core/cmp/trait.Eq.html) trait, changes while it is in the map. This is normally only
possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.

The behavior resulting from either logic error is not specified, but will
be encapsulated to the `HashMap` that observed the logic error and not
result in undefined behavior. This could include panics, incorrect results,
aborts, memory leaks, and non-termination.

The hash table implementation is a Rust port of Google's [SwissTable](https://abseil.io/blog/20180927-swisstables).
The original C++ version of SwissTable can be found [here](https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h), and this
[CppCon talk](https://www.youtube.com/watch?v=ncHmEUmJZf4) gives an overview of how the algorithm works.

# Examples

```rust
use std::collections::HashMap;

// Type inference lets us omit an explicit type signature (which
// would be `HashMap<String, String>` in this example).
let mut book_reviews = HashMap::new();

// Review some books.
book_reviews.insert(
    "Adventures of Huckleberry Finn".to_string(),
    "My favorite book.".to_string(),
);
book_reviews.insert(
    "Grimms' Fairy Tales".to_string(),
    "Masterpiece.".to_string(),
);
book_reviews.insert(
    "Pride and Prejudice".to_string(),
    "Very enjoyable.".to_string(),
);
book_reviews.insert(
    "The Adventures of Sherlock Holmes".to_string(),
    "Eye lyked it alot.".to_string(),
);

// Check for a specific one.
// When collections store owned values (String), they can still be
// queried using references (&str).
if !book_reviews.contains_key("Les Misérables") {
    println!("We've got {} reviews, but Les Misérables ain't one.",
             book_reviews.len());
}

// oops, this review has a lot of spelling mistakes, let's delete it.
book_reviews.remove("The Adventures of Sherlock Holmes");

// Look up the values associated with some keys.
let to_find = ["Pride and Prejudice", "Alice's Adventure in Wonderland"];
for &book in &to_find {
    match book_reviews.get(book) {
        Some(review) => println!("{book}: {review}"),
        None => println!("{book} is unreviewed.")
    }
}

// Look up the value for a key (will panic if the key is not found).
println!("Review for Jane: {}", book_reviews["Pride and Prejudice"]);

// Iterate over everything.
for (book, review) in &book_reviews {
    println!("{book}: \"{review}\"");
}
```

A `HashMap` with a known list of items can be initialized from an array:

```rust
use std::collections::HashMap;

let solar_distance = HashMap::from([
    ("Mercury", 0.4),
    ("Venus", 0.7),
    ("Earth", 1.0),
    ("Mars", 1.5),
]);
```

`HashMap` implements an [`Entry` API](https://doc.rust-lang.org/stable/std/collections/hash/map/struct.HashMap.html#method.entry), which allows
for complex methods of getting, setting, updating and removing keys and
their values:

```rust
use std::collections::HashMap;

// type inference lets us omit an explicit type signature (which
// would be `HashMap<&str, u8>` in this example).
let mut player_stats = HashMap::new();

fn random_stat_buff() -> u8 {
    // could actually return some random value here - let's just return
    // some fixed value for now
    42
}

// insert a key only if it doesn't already exist
player_stats.entry("health").or_insert(100);

// insert a key using a function that provides a new value only if it
// doesn't already exist
player_stats.entry("defence").or_insert_with(random_stat_buff);

// update a key, guarding against the key possibly not being set
let stat = player_stats.entry("attack").or_insert(100);
*stat += random_stat_buff();

// modify an entry before an insert with in-place mutation
player_stats.entry("mana").and_modify(|mana| *mana += 200).or_insert(100);
```

The easiest way to use `HashMap` with a custom key type is to derive [`Eq`](https://doc.rust-lang.org/stable/core/cmp/trait.Eq.html) and [`Hash`](https://doc.rust-lang.org/stable/core/hash/trait.Hash.html).
We must also derive [`PartialEq`](https://doc.rust-lang.org/stable/core/cmp/trait.PartialEq.html).

```rust
use std::collections::HashMap;

#[derive(Hash, Eq, PartialEq, Debug)]
struct Viking {
    name: String,
    country: String,
}

impl Viking {
    /// Creates a new Viking.
    fn new(name: &str, country: &str) -> Viking {
        Viking { name: name.to_string(), country: country.to_string() }
    }
}

// Use a HashMap to store the vikings' health points.
let vikings = HashMap::from([
    (Viking::new("Einar", "Norway"), 25),
    (Viking::new("Olaf", "Denmark"), 24),
    (Viking::new("Harald", "Iceland"), 12),
]);

// Use derived implementation to print the status of the vikings.
for (viking, health) in &vikings {
    println!("{viking:?} has {health} hp");
}
```

# Usage in `const` and `static`

As explained above, `HashMap` is randomly seeded: each `HashMap` instance uses a different seed,
which means that `HashMap::new` cannot be used in const context. To construct a `HashMap` in the
initializer of a `const` or `static` item, you will have to use a different hasher that does not
involve a random seed, as demonstrated in the following example. **A `HashMap` constructed this
way is not resistant against HashDoS!**

```rust
use std::collections::HashMap;
use std::hash::{BuildHasherDefault, DefaultHasher};
use std::sync::Mutex;

const EMPTY_MAP: HashMap<String, Vec<i32>, BuildHasherDefault<DefaultHasher>> =
    HashMap::with_hasher(BuildHasherDefault::new());
static MAP: Mutex<HashMap<String, Vec<i32>, BuildHasherDefault<DefaultHasher>>> =
    Mutex::new(HashMap::with_hasher(BuildHasherDefault::new()));
```
